// Autogenerated from Pigeon (v10.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, unnecessary_import
// ignore_for_file: avoid_relative_lib_imports
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;
import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';
import 'package:flutter_test/flutter_test.dart';

import 'package:geocoding_android/src/geocoder.pigeon.dart';

/// Host API for managing the native `InstanceManager`.
abstract class TestInstanceManagerHostApi {
  static TestDefaultBinaryMessengerBinding? get _testBinaryMessengerBinding => TestDefaultBinaryMessengerBinding.instance;
  static const MessageCodec<Object?> codec = StandardMessageCodec();

  /// Clear the native `InstanceManager`.
  ///
  /// This is typically only used after a hot restart.
  void clear();

  static void setup(TestInstanceManagerHostApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.InstanceManagerHostApi.clear', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          // ignore message
          api.clear();
          return <Object?>[];
        });
      }
    }
  }
}

/// Handles methods calls to the native Java Object class.
///
/// Also handles calls to remove the reference to an instance with `dispose`.
///
/// See https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html.
abstract class TestJavaObjectHostApi {
  static TestDefaultBinaryMessengerBinding? get _testBinaryMessengerBinding => TestDefaultBinaryMessengerBinding.instance;
  static const MessageCodec<Object?> codec = StandardMessageCodec();

  void dispose(String identifier);

  static void setup(TestJavaObjectHostApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.JavaObjectHostApi.dispose', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.JavaObjectHostApi.dispose was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_identifier = (args[0] as String?);
          assert(arg_identifier != null,
              'Argument for dev.flutter.pigeon.JavaObjectHostApi.dispose was null, expected non-null String.');
          api.dispose(arg_identifier!);
          return <Object?>[];
        });
      }
    }
  }
}

class _TestGeocoderHostApiCodec extends StandardMessageCodec {
  const _TestGeocoderHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is Locale) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return Locale.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// Host API for `Geocoding`.
///
/// This class may handle instantiating and adding native object instances that
/// are attached to a Dart instance or handle method calls on the associated
/// native class or an instance of the class.
abstract class TestGeocoderHostApi {
  static TestDefaultBinaryMessengerBinding? get _testBinaryMessengerBinding => TestDefaultBinaryMessengerBinding.instance;
  static const MessageCodec<Object?> codec = _TestGeocoderHostApiCodec();

  /// Creates a new native instance and adds it to the `InstanceManager`.
  void create(String instanceId, Locale locale);

  /// Request a list of [Address]es that attempt to describe the surroundings
  /// of the provided [latitude] and [longitude].
  ///
  /// The [maxResults] indicates the max number of [Address]es to be returned.
  /// Smaller numbers (1 to 5) are recommended.
  ///
  /// The [geocodeListenerInstanceId] refers to the [GeocodeListenerFlutterApi]
  /// instance that should be used to receive the results.
  void getFromLocation(String instanceId, double latitude, double longitude, int maxResults, String geocodeListenerInstanceId);

  /// Requests an array of [Address]es that attempt to describe the named
  /// [address].
  ///
  /// The [address] may be a place name such as "Dalvik, Iceland", an address
  /// such as "1600 Amphitheatre Parkway, Mountain View, CA", an airport code
  /// such as "SFO", and so forth. The resulting addresses should be localized
  /// for the locale provided to this class's constructor.
  ///
  /// The [geocodeListenerInstanceId] refers to the [GeocodeListenerFlutterApi]
  /// instance that should be used to receive the results.
  ///
  /// You may specify a bounding box for the search results by including the
  /// latitude and longitude of the lower left point and upper right point of
  /// the box.
  void getFromLocationName(String instanceId, String address, String geocodeListenerInstanceId, int? maxResults, double? lowerLeftLatitude, double? lowerLeftLongitude, double? upperRightLatitude, double? upperRightLongitude);

  /// Indicates if a geocoder implementation is present that may return results.
  ///
  /// If `true`, there is still no guarantee that any individual geocoding
  /// attempt will succeed.
  bool isPresent();

  static void setup(TestGeocoderHostApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.GeocoderHostApi.create', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.GeocoderHostApi.create was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_instanceId = (args[0] as String?);
          assert(arg_instanceId != null,
              'Argument for dev.flutter.pigeon.GeocoderHostApi.create was null, expected non-null String.');
          final Locale? arg_locale = (args[1] as Locale?);
          assert(arg_locale != null,
              'Argument for dev.flutter.pigeon.GeocoderHostApi.create was null, expected non-null Locale.');
          api.create(arg_instanceId!, arg_locale!);
          return <Object?>[];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.GeocoderHostApi.getFromLocation', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.GeocoderHostApi.getFromLocation was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_instanceId = (args[0] as String?);
          assert(arg_instanceId != null,
              'Argument for dev.flutter.pigeon.GeocoderHostApi.getFromLocation was null, expected non-null String.');
          final double? arg_latitude = (args[1] as double?);
          assert(arg_latitude != null,
              'Argument for dev.flutter.pigeon.GeocoderHostApi.getFromLocation was null, expected non-null double.');
          final double? arg_longitude = (args[2] as double?);
          assert(arg_longitude != null,
              'Argument for dev.flutter.pigeon.GeocoderHostApi.getFromLocation was null, expected non-null double.');
          final int? arg_maxResults = (args[3] as int?);
          assert(arg_maxResults != null,
              'Argument for dev.flutter.pigeon.GeocoderHostApi.getFromLocation was null, expected non-null int.');
          final String? arg_geocodeListenerInstanceId = (args[4] as String?);
          assert(arg_geocodeListenerInstanceId != null,
              'Argument for dev.flutter.pigeon.GeocoderHostApi.getFromLocation was null, expected non-null String.');
          api.getFromLocation(arg_instanceId!, arg_latitude!, arg_longitude!, arg_maxResults!, arg_geocodeListenerInstanceId!);
          return <Object?>[];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.GeocoderHostApi.getFromLocationName', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.GeocoderHostApi.getFromLocationName was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_instanceId = (args[0] as String?);
          assert(arg_instanceId != null,
              'Argument for dev.flutter.pigeon.GeocoderHostApi.getFromLocationName was null, expected non-null String.');
          final String? arg_address = (args[1] as String?);
          assert(arg_address != null,
              'Argument for dev.flutter.pigeon.GeocoderHostApi.getFromLocationName was null, expected non-null String.');
          final String? arg_geocodeListenerInstanceId = (args[2] as String?);
          assert(arg_geocodeListenerInstanceId != null,
              'Argument for dev.flutter.pigeon.GeocoderHostApi.getFromLocationName was null, expected non-null String.');
          final int? arg_maxResults = (args[3] as int?);
          final double? arg_lowerLeftLatitude = (args[4] as double?);
          final double? arg_lowerLeftLongitude = (args[5] as double?);
          final double? arg_upperRightLatitude = (args[6] as double?);
          final double? arg_upperRightLongitude = (args[7] as double?);
          api.getFromLocationName(arg_instanceId!, arg_address!, arg_geocodeListenerInstanceId!, arg_maxResults, arg_lowerLeftLatitude, arg_lowerLeftLongitude, arg_upperRightLatitude, arg_upperRightLongitude);
          return <Object?>[];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.GeocoderHostApi.isPresent', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          // ignore message
          final bool output = api.isPresent();
          return <Object?>[output];
        });
      }
    }
  }
}

abstract class TestGeocodeListenerHostApi {
  static TestDefaultBinaryMessengerBinding? get _testBinaryMessengerBinding => TestDefaultBinaryMessengerBinding.instance;
  static const MessageCodec<Object?> codec = StandardMessageCodec();

  void create(String instanceId);

  static void setup(TestGeocodeListenerHostApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.GeocodeListenerHostApi.create', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.GeocodeListenerHostApi.create was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_instanceId = (args[0] as String?);
          assert(arg_instanceId != null,
              'Argument for dev.flutter.pigeon.GeocodeListenerHostApi.create was null, expected non-null String.');
          api.create(arg_instanceId!);
          return <Object?>[];
        });
      }
    }
  }
}
